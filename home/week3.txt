1. static -> lifecycle, loading class
		class loader, classpath

    static: block, field, method, class

    final: class, method, field

 	See Immutable class
		String, Wrapper

    Wrappers -> Byte, Short, Integer...

    List methods

	ArrayList class, methods

    List<Type> list = new ArrayList<>();

    SOLID (OOD)

	DESIGN PATTERNS
        https://ru.wikipedia.org/wiki/Design_Patterns
	Head First Design Patterns book

    see main patterns
	Strategy, Observer, Iterator, Singleton, State

    read head first design patterns

2. finish prev homework (Library, ArrayList, Group)

3. Before implement all classes, draw class diagram
       For  more comfortable structure override toString and equals
       use ArrayList

       	Вы наконец-то решили заняться чем-то полезным и открыть личное дело.
   	В голову пришла гениальная идея купить газельку и создать цирк на колесах.
   	Вы наняли в труппу пару "артистов" и даете концерты для психичесики неуравновешенных людей.

   Вам, как владельцу цирка, доступны следующие действия:
    1) посмотреть список артистов.
    2) нанять на работу нового циркача.
    3) уволить самого пьющего акробата.
    4) Отправить кого-то выступать (каждый выступает по разному)
    5) Узнать сколько раз выступал каждый из сотрудников
    6) Выплалить зарплату артисттам (канатоходцам доп % за риски)
    7) переехать на другое место

   4*. If you want more tasks, ask me!